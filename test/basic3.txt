input parse
  10 dim a, b$[20]
  20 input a, b$
  30 print a*2, b$
end
24 hello world!
input arrays
  10 dim a, b[3], c[2]
  20 input a, b, c
  30 print a, b, c
end
12 34 56 78 90 0
input strings
  10 dim a$[10]
  20 input a$
  30 print a$
  40 print "end"
end
trailing garbage
STOP at line 20!
hello worl
end
bye
end
input overflows, garbage
  10 dim a, b[2]
  20 input a, b
  30 print a, b
end
trailing garbage
STOP at line 20!
1 2 3
bad number
bad number
bad number
trailing garbage
STOP at line 20!
0 0 0
getchar
  10 print getchar
end
0
print raw
  10 dim a$[15]
  20 let a$ = "hello world!"
  30 print raw a
  35 print hex a
  36 print dec a
  40 print a$, a#
end
hello world!
0x68 0x65 0x6c 0x6c 0x6f 0x20 0x77 0x6f 0x72 0x6c 0x64 0x21 0x0 0x0 0x0
104 101 108 108 111 32 119 111 114 108 100 33 0 0 0
hello world! 12
  50 dim b[15] as byte
  60 let b$ = "world hello!"
  70 print raw b
  75 print hex b
  76 print dec b
  80 print b$, b#
end
world hello!
0x77 0x6f 0x72 0x6c 0x64 0x20 0x68 0x65 0x6c 0x6c 0x6f 0x21 0x0 0x0 0x0
119 111 114 108 100 32 104 101 108 108 111 33 0 0 0
world hello! 15
more print raw
  10 dim an[10] as byte, j
  20 for j = 0 to 9
  30   let an[j] = j+48
  40 next 
  45 configure timer 0 for 1 s
  46 configure timer 1 for 3500 ms
  50 on timer 0 do print raw an
  51 on timer 1 do stop 
  60 halt 
end
  10 dim an[10] as byte, j
  20 for j = 0 to 9
    let j = 0
  30   let an[j] = j+48
    let an[0] = 48
  40 next 
    let j = 1
  30   let an[j] = j+48
    let an[1] = 49
  40 next 
    let j = 2
  30   let an[j] = j+48
    let an[2] = 50
  40 next 
    let j = 3
  30   let an[j] = j+48
    let an[3] = 51
  40 next 
    let j = 4
  30   let an[j] = j+48
    let an[4] = 52
  40 next 
    let j = 5
  30   let an[j] = j+48
    let an[5] = 53
  40 next 
    let j = 6
  30   let an[j] = j+48
    let an[6] = 54
  40 next 
    let j = 7
  30   let an[j] = j+48
    let an[7] = 55
  40 next 
    let j = 8
  30   let an[j] = j+48
    let an[8] = 56
  40 next 
    let j = 9
  30   let an[j] = j+48
    let an[9] = 57
  40 next 
  45 configure timer 0 for 1 s
  46 configure timer 1 for 3500 ms
  50 on timer 0 do print raw an
  51 on timer 1 do stop 
0123456789
0123456789
0123456789
STOP at line 60!
print raw multibyte
  10 dim a[3] as short, b[3], c[3] as byte
  20 input a, b, c
  30 print raw a, b, c
  40 print hex a, b, c
end
  10 dim a[3] as short, b[3], c[3] as byte
    let a[0] = 16706
    let a[1] = 17220
    let a[2] = 17734
    let b[0] = 808530483
    let b[1] = 875902519
    let b[2] = 943274555
    let c[0] = 97
    let c[1] = 98
    let c[2] = 99
  30 print raw a, b, c
ABCDEF0123456789:;abc
  40 print hex a, b, c
0x4142 0x4344 0x4546 0x30313233 0x34353637 0x38393a3b 0x61 0x62 0x63
print semicolon
error -      ^
   1 dim a$
   2 let a$ = " "
  10 print 1, 2, 3;
  20 print "4"+a$+"5"+a$+"6"
  30 print ";";
  40 print ";"
end
1 2 34 5 6
;;
strings
string buffer overflow
  10 dim a$[79]
  20 let a$ = "hello"+" "+"world!"
  30 let a$ = a$[0+0:5]+a$+a$[6:3+3]
  40 print a$, a$[9:3]
end
hellohello world!world! o w
substrings
01 89
0123456789
not 
10
  10 print a$[0:a#]
end
0123456789
vprint
  10 dim zz$[30]
  20 dim aa
  30 vprint zz$ = "hello", 2*2, "there!"
  40 print zz$
  50 vprint zz = 10*10
  60 print zz
  70 print raw zz
  80 vprint aa = zz$[6:3]
end
hello 4 there!
100 101 108 108 111 32 52 32 116 104 101 114 101 33 0 0 0 0 0 0 0 0 0 0 0 0 0 
dello 4 there!
trailing garbage
STOP at line 80!
  80 vprint aa = zz$[6:2]
  90 print aa
end
4
character constants
  10 dim a[5] as byte
  20 dim b$[5]
  30 let a[0] = 'h', b[0] = 'b'
  40 let a[1] = 'e', b[1] = 'y'
  50 let a[2] = 'l', b[2] = 'e'
  60 let a[3] = 'l', b[3] = 0
  70 let a[4] = 'o', b[4] = 0
  80 print a#, a$, a, a$[0:1]
  90 print b#, b$, b, b$[0:1]
end
5 hello 104 101 108 108 111 h
3 bye 98 121 101 0 0 b
long strings
  10 dim a$[79]
  20 dim b$[10]
  30 let b$ = "0123456789"
  40 let a$ = b$+b$
  50 let a$ = a$+a$
  60 let a$ = a$+a$
  70 let a$ = a$+a$
  80 print a#, a$
  90 print a$
 100 print b#, b$
 110 print b$
end
79 012345678901234567890123456789012345678901234567890123456789012345678901234
012345678901234567890123456789012345678901234567890123456789012345678901234567
10 0123456789
0123456789
numeric extraction
  10 dim a, b$[10]
  20 let a = 4788
  30 vprint b$ = a
  40 vprint a = b$[1:2]
  50 print a*2
end
156
configure timer expressions
   1 dim m, o
   2 let o = msecs
  10 configure timer 1 for 2+2 s
  20 on timer 1 do gosub done
  30 sleep 3+3 s
  40 end 
  50 sub done
  60   sleep 500 ms
  70   print (msecs-o)/1000
  80 endsub 
end
4
   1 dim m, o
   2 let o = msecs
  10 configure timer 1 for 2+2 s
  20 on timer 1 do gosub done
  30 sleep 3+3 s
  40 end 
  50 sub done
  60   let m = msecs
  61   while msecs<m+500 do
  62   endwhile 
  70   print (msecs-o)/1000
  80 endsub 
end
4
i2c transfers
  10 dim a as byte, b as short, c[3], d$[4], e[4] as byte
  20 let a = 1, b = 0x203, c[0] = 0x11223344, c[1] = 0x55667788
  25 let c[2] = 0x99aabbcc
  30 let d$ = "hi", e[0] = 's', e[1] = 't', e[2] = 'o', e[3] = 'p'
  40 i2c start 2+2
  50 i2c write a, b
  60 i2c write c, d
  70 i2c write e, c[0]
  80 i2c read a, b
  90 i2c read c, d
 100 i2c read e, c[0]
 110 i2c stop
end
i2c start 4
i2c write transfer:
  0x1
  0x2
  0x3
i2c write transfer:
  0x11
  0x22
  0x33
  0x44
  0x55
  0x66
  0x77
  0x88
  0x99
  0xaa
  0xbb
  0xcc
  0x68
  0x69
  0x0
  0x0
i2c write transfer:
  0x73
  0x74
  0x6f
  0x70
  0x11
  0x22
  0x33
  0x44
i2c read transfer 3 bytes
i2c read transfer 16 bytes
i2c read transfer 8 bytes
i2c stop
qspi transfers
  10 dim a as byte, b as short, c[3], d$[4], e[4] as byte
  20 let a = 1, b = 0x203, c[0] = 0x11223344, c[1] = 0x55667788
  25 let c[2] = 0x99aabbcc
  30 let d$ = "hi", e[0] = 's', e[1] = 't', e[2] = 'o', e[3] = 'p'
  50 qspi a, b
  60 qspi c, d
  70 qspi e, c[0]
end
qspi transfer:
  0x1
  0x2
  0x3
qspi transfer:
  0x11
  0x22
  0x33
  0x44
  0x55
  0x66
  0x77
  0x88
  0x99
  0xaa
  0xbb
  0xcc
  0x68
  0x69
  0x0
  0x0
qspi transfer:
  0x73
  0x74
  0x6f
  0x70
  0x11
  0x22
  0x33
  0x44
uart transfers
  10 dim a as byte, b as short, c[3], d$[4], e[4] as byte
  20 let a = 1, b = 0x203, c[0] = 0x11223344, c[1] = 0x55667788
  25 let c[2] = 0x99aabbcc
  30 let d$ = "hi", e[0] = 's', e[1] = 't', e[2] = 'o', e[3] = 'p'
  50 uart 1 write a, b
  60 uart 2 write c, d
  70 uart 1 write e, c[0]
  80 uart 2 read a, b
  90 uart 1 read c, d
 100 uart 2 read e, c[0]
end
uart 0 write transfer:
  0x1
  0x2
  0x3
uart 1 write transfer:
  0x11
  0x22
  0x33
  0x44
  0x55
  0x66
  0x77
  0x88
  0x99
  0xaa
  0xbb
  0xcc
  0x68
  0x69
  0x0
  0x0
uart 0 write transfer:
  0x73
  0x74
  0x6f
  0x70
  0x11
  0x22
  0x33
  0x44
uart 1 read transfer 3 bytes
uart 0 read transfer 16 bytes
uart 1 read transfer 8 bytes
parse errors strings
error -      ^
error -       ^
error -        ^
error -    ^
error -       ^
error -    ^
error -          ^
error -       ^
error -    ^
error -       ^
error -       ^
error -       ^
error -       ^
error -       ^
error -       ^
error -       ^
error -       ^
error -       ^
error -       ^
error -       ^
error -       ^
error -        ^
end
parse errors i2c, qspi, uart
       ^ - error
        ^ - error
error -          ^
error -         ^
error -       ^
error -      ^
error -         ^
error -        ^
error -       ^
error -          ^
error -         ^
error -       ^
         ^ - error
error -     ^
error -    ^
error -         ^
error -            ^
error -           ^
error -          ^
error -             ^
error -            ^
error -   ^
error -    ^
error -    ^
error -   ^
end
runtime errors immediate
trailing garbage
12
1234567890
trailing garbage
runtime errors program
  10 dim a$[10]
  20 dim b
  30 input a$
  40 vprint b = a$
  50 print b
  60 input a$
  70 print a$
  80 vprint b = 1, 1
end
trailing garbage
STOP at line 40!
12
trailing garbage
STOP at line 60!
1234567890
trailing garbage
STOP at line 80!
test isr sleeps
  10 dim i, s, start, tocks
  15 let s = 1
  20 configure timer 1 for 3 s
  30 on timer 1 do gosub tock
  40 for i = 1 to 20
  50   let start = msecs
  60   sleep 1*s s
  70   assert msecs>start+800&&msecs<start+1700
  80 next 
  90 assert tocks>=5&&tocks<=8
 100 end 
 110 sub tock
 120   dim start
 130   let start = msecs
 140   sleep 500*s ms
 150   assert msecs>start+300&&msecs<start+700
 160   let tocks = tocks+1
 170 endsub 
end
assertion failed
STOP at line 70!
test basic arrays
  10 dim a[10]
  20 dim i, j
  30 for i = 0 to 9
  40   for j = i to 9
  50     let a[j] = a[j]+i
  60   next 
  70 next 
  80 for i = 0 to 9
  90   print i, a[i]
 100 next 
end
0 0
1 1
2 3
3 6
4 10
5 15
6 21
7 28
8 36
9 45
test recursion
  10 dim t
  20 gosub sumit 7, t
  30 print t
  40 end 
  50 sub sumit x, y
  60   dim z
  70   if x==1 then
  80     let y = 1
  90     return 
 100   endif 
 110   gosub sumit x-1, z
 120   let y = z+x
 130 endsub 
end
28
test too many scopes/gosubs
  10 gosub sub
  20 sub sub
  29   print "sub"
  30   gosub sub
  40 endsub 
end
sub
sub
sub
sub
sub
sub
sub
sub
sub
sub
too many gosubs
STOP at line 30!
  10 gosub sub
  20 sub sub
  21   if 1 then
  22     if 1 then
  29       print "sub"
  30       gosub sub
  31     endif 
  32   endif 
  40 endsub 
end
sub
sub
sub
sub
sub
sub
sub
sub
sub
too many scopes
STOP at line 21!
test analog
3299
3400
3401
test comments
error -    ^
error -    ^
   1 //nocomment
  10 print 1  //comment
  30 print ""  //comment
end
1

test noprint and nolet
3
  10 print 2+3
  20 print 3+4
  30 dim a, b, c
  40 a = 5
  50 b = 6, c = 7
  60 print a, b, c
end
5
7
5 6 7
test random
  10 dim a
  20 for a = 1 to 4
  30   print random  // random
  40 next 
end
550651472
-1452091136
-1837636785
338550345
test library
  sub1
  again
  sub2
  sub1
  again
  sub2
library:
  sub1
  again
  sub2
new
library:
  sub1
  again
  sub2
  40 dim i
  50 gosub sub1
  60 gosub sub2 i, 2
  70 print i
  80 gosub sub3 1
 100 end 
 200 sub sub3 a
 220   print "bye", a
 230 endsub 
end
hello
again
bye 0
4
bye 1
  40 dim i
  50 gosub sub1
  60 gosub sub2 i, 2
  70 print i
  80 gosub sub3 1
  90 gosub sub4
 100 end 
 200 sub sub3 a
 220   print "bye", a
 230 endsub 
end
hello
again
bye 0
4
bye 1
missing sub: sub4
STOP at line 90!
  sub3
library:
  sub1
  again
  sub2
sub1
library:
  10 sub sub1
  20   print "hello"
  25   gosub again
  30 endsub 
sub2
library:
  40 sub sub2 a, b
  50   a = b*2
  51   gosub sub3 0
  60 endsub 
sub3
 200 sub sub3 a
 220   print "bye", a
 230 endsub 
sub4
       ^ - error
hello
again
bye 0
4
bye 1
purge
  sub3
missing sub: sub1
STOP at line 50!
test library recursion
library:
  50 sub sumit x, y
  60   dim z
  70   if x==1 then
  80     let y = 1
  90     return 
 100   endif 
 110   gosub sumit x-1, z
 120   let y = z+x
 130 endsub 
main:
  10 dim t
  20 gosub sumit 7, t
  30 print t
  40 end 
end
28
test library read/data
library:
  10 sub doit1
  15   dim a
  20   restore liblabel
  30   read a
  40   print "doit1", a
  50 endsub 
library:
  51 sub doit2
  52   read a
  53   print "doit2", a
  59 endsub 
main:
   1 gosub doit1
  15 dim a
  20 restore mainlabel
  30 read a
  40 print "main", a
  41 gosub doit2
  50 end 
  60 label mainlabel
  70 data 456
end
doit1 123
main 456
doit2 789
test library profile
library:
  other
      0ms other
   1000ms library
      0ms   10 gosub other
end
      0ms other
   1000ms library
      0ms   10 gosub other
end
test norem
  10 rem   // hello
  20 // bye
end
stop/continue in library
library:
  10 sub doit
  20   stop 
  25   print "library running"
  30 endsub 
main:
   1 print "running"
  10 gosub doit
end
running
STOP at line 20!
library running
running
STOP at line 20!
running
STOP at line 20!
       ^ - error
main:
   1 print "running"
  10 gosub doit
end
running
missing sub: doit
STOP at line 10!
_ in variable names
  10 dim _abc
  20 _abc = 2
  30 let _abc = _abc+1
  40 print _abc
  50 restore xxx
  60 label yyy
end
3
missing label: xxx
STOP at line 50!
wave statements
error -   ^
error -   ^
  10 dim pot
  20 pot = 3000
  30 wave square pot*2
  40 wave sine pot
  50 wave triangle pot*3
  60 wave ekg 0
end
